events {
    worker_connections 1024;
}

http {
    # Custom log format with pool, release, and upstream info
    log_format extended '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'pool="$upstream_http_x_app_pool" '
                       'release="$upstream_http_x_release_id" '
                       'upstream_status=$upstream_status '
                       'upstream_addr=$upstream_addr '
                       'request_time=$request_time '
                       'upstream_response_time=$upstream_response_time';

    # Ensure we write to actual files (not symlinks)
    access_log /var/log/nginx/access.log extended;
    error_log /var/log/nginx/error.log;

    upstream active_backend {
        server app_blue:3000 max_fails=1 fail_timeout=2s;
        server app_green:3000 max_fails=1 fail_timeout=2s backup;
    }

    server {
        listen 80;
        
        location / {
            proxy_pass http://active_backend;
            proxy_connect_timeout 1s;
            proxy_read_timeout 2s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_pass_request_headers on;
            
            # Capture headers for logging
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /healthz {
            proxy_pass http://active_backend/healthz;
            access_log off;
        }
    }
}